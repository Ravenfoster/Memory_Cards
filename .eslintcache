[{"C:\\Пргострой\\Эксперимент\\React\\Cards\\cards\\src\\index.js":"1","C:\\Пргострой\\Эксперимент\\React\\Cards\\cards\\src\\App.js":"2","C:\\Пргострой\\Эксперимент\\React\\Cards\\cards\\src\\cards.js":"3"},{"size":240,"mtime":1606682057005,"results":"4","hashOfConfig":"5"},{"size":4766,"mtime":1606689019672,"results":"6","hashOfConfig":"5"},{"size":1173,"mtime":1606723946136,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"clk3xr",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Пргострой\\Эксперимент\\React\\Cards\\cards\\src\\index.js",[],"C:\\Пргострой\\Эксперимент\\React\\Cards\\cards\\src\\App.js",["15"],"import React, { useEffect, useState } from 'react'\nimport AllCards from './cards'\nimport { v4 as uuidv4 } from \"uuid\";\nimport './App.scss'\n\nfunction shuffle(arr) {\n  let j, temp;\n  for (let i = arr.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    temp = arr[j];\n    arr[j] = arr[i];\n    arr[i] = temp;\n  }\n  return arr;\n}\n\nfunction randomCardsArray(AllCards) {\n  let indexArr = []\n  let randomCardsArray = []\n\n  while (indexArr.length < 8) {\n    let r = Math.floor(Math.random() * AllCards.length - 1) + 1\n    if (indexArr.indexOf(r) === -1) indexArr.push(r) // если сгенерируемого индекса нет в массиве, то он добавляется\n  }\n\n  for (let i = 0; i < indexArr.length; i++) {\n    randomCardsArray.push(AllCards[indexArr[i]])\n  }\n\n  return randomCardsArray\n}\n\nfunction returnUniqId(array) {\n  return array.map(el => {\n    let copy = Object.assign({}, el);\n    copy.uniqId = uuidv4()\n    return copy\n  })\n}\n\nfunction renderCard(AllCards) {\n  const cards = randomCardsArray(AllCards)\n    .map((card, index) => ({\n      id: index + 1,\n      cardURL: `img/${card}`,\n      isFliped: true,\n    }))\n  const card = cards\n  const finaleArr = returnUniqId(card.concat(cards))\n\n  return shuffle(finaleArr)\n}\n\nfunction cardsFlipped(array) {\n  return array.map(el => {\n    let copy = Object.assign({}, el);\n    copy.isFliped = false\n    return copy\n  })\n}\n\nfunction App() {\n  const [state, setState] = useState()\n  const [init, setInit] = useState()\n  const [currentRound, setCurrentRound] = useState(1)\n  const [firstCard, setFirstCard] = useState(null)\n  const [secondCard, setSecondCard] = useState(null)\n\n  useEffect(() => {\n    const game = renderCard(AllCards)\n    setState(game)\n    setInit(game)\n  }, [])\n\n  useEffect(() => {\n    if (init) {\n      setTimeout(() => {\n        setState(cardsFlipped(state))\n      }, 3000)\n    }\n  }, [init])\n\n  useEffect(() => {\n    if (firstCard && secondCard) {\n      if (secondCard && firstCard.cardId !== secondCard.cardId) {\n        setTimeout(() => {\n          setCardIsFlipped(firstCard.carduniqId, false)\n          setCardIsFlipped(secondCard.carduniqId, false)\n          setFirstCard(null)\n          setSecondCard(null)\n          setCurrentRound(prev => prev + 1)\n        }, 1000)\n      } else if (firstCard && secondCard && firstCard.cardId === secondCard.cardId) {\n        setFirstCard(null)\n        setSecondCard(null)\n        setCurrentRound(prev => prev + 1)\n      }\n    }\n\n  }, [firstCard, secondCard])\n\n  function setCardIsFlipped(carduniqId, isFliped) {\n    setState(state => state.map(card => {\n      if (card.uniqId !== carduniqId) {\n        return card;\n      }\n      return { ...card, isFliped }\n    }))\n  }\n\n  function setAllCardsAreFlipped(array) {\n    return array.map(el => el.isFliped)\n  }\n\n  function flipCard(e) {\n    const carduniqId = e.target.getAttribute('data-uniqueid')\n    const cardId = e.target.getAttribute('data-id')\n\n    if (!firstCard) {\n      setFirstCard({ cardId, carduniqId })\n      setCardIsFlipped(carduniqId, true)\n\n    } else if (firstCard && !secondCard) {\n      setSecondCard({ cardId, carduniqId })\n      setCardIsFlipped(carduniqId, true)\n    }\n    return\n  }\n\n  function gameRestart() {\n\n    const arr = setAllCardsAreFlipped(state)\n    const el = element => element === false\n\n    if (!arr.some(el) || arr.some(el)) {\n      setState(cardsFlipped(state))\n    }\n\n    setTimeout(() => {\n      setState(renderCard(AllCards))\n      setInit(renderCard(AllCards))\n      setCurrentRound(1)\n      setFirstCard(null)\n      setSecondCard(null)\n    }, 1000)\n  }\n\n  return (\n    <React.Fragment>\n      <div className='Game'>\n        <div className='Game__wrapper'>\n          <div className='Game__round'>\n            <h1>Current Round: {currentRound}</h1>\n          </div>\n          <button className='Game__button' onClick={() => gameRestart()}>Try Again!</button>\n          <div className='Game__grid'>\n            {state\n              ? state.map((card, index) => {\n                return (\n                  <React.Fragment key={index} >\n                    <div className={card.isFliped ? 'card-container flipped' : 'card-container'}\n                      onClick={(e) => flipCard(e)}\n                    >\n                      <div className=\"card-back\">\n                        <img src={`${card.cardURL}`} alt='картинка' />\n                      </div>\n                      <div className=\"card-front\" data-uniqueid={card.uniqId} data-id={card.id}>\n                      </div>\n                    </div>\n                  </React.Fragment>\n                )\n              })\n              : null\n            }\n          </div>\n        </div>\n      </div>\n    </React.Fragment >\n  )\n}\n\nexport default App;\n","C:\\Пргострой\\Эксперимент\\React\\Cards\\cards\\src\\cards.js",[],{"ruleId":"16","severity":1,"message":"17","line":81,"column":6,"nodeType":"18","endLine":81,"endColumn":12,"suggestions":"19"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["20"],{"desc":"21","fix":"22"},"Update the dependencies array to be: [init, state]",{"range":"23","text":"24"},[1849,1855],"[init, state]"]